<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Player Variables
instance_create(x, y, obj_controller);

spd = 2;
dir = ""; // U D R L
xdir = 0; // LEFT -1 | 1 RIGHT
ydir = 0; // UP -1 | 1 DOWN
moving = false; // If not moving, sprite[0]

image_index = 0;

sound = 0;
hint = false;
item = "";
freeze = false;
prompt = false;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Player Sprite Toggle

switch (dir) {

    case "R": // Right
        if (global.bw) sprite_index = spr_HD_character_walk_right_BW;
        else sprite_index = spr_HD_character_walk_right;
    break;
    
    case "L": // Left
        if (global.bw) sprite_index = spr_HD_character_walk_left_BW;
        else sprite_index = spr_HD_character_walk_left;
    break;
    
    case "U": // Up
        if (global.bw) sprite_index = spr_HD_character_walk_up_BW;
        else sprite_index = spr_HD_character_walk_up;
    break;
    
    case "D": // Down
        if (global.bw) sprite_index = spr_HD_character_walk_down_BW;
        else sprite_index = spr_HD_character_walk_down;
    break;

}

if (!moving || freeze) {
    image_index = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Player Move

if (!freeze) {
    left = keyboard_check(ord('A'));
    right = keyboard_check(ord('D'));
    down = keyboard_check(ord('S'));
    up = keyboard_check(ord('W'));
    
    xdir = 0;
    ydir = 0;
    
    if (left) {
        dir = "L";
        xdir = -1;
    } if (right) {
        dir = "R";
        xdir = 1;
    } if (down) { 
        dir = "D";
        ydir = 1;
    } if (up) {
        dir = "U";
        ydir = -1;
    }
    
    if (xdir == 0 &amp;&amp; ydir = 0) moving = false;
    else moving = true;
    
    // Closest item
    
    item = "NONE";
        
    if (dir = "U") {
        item = instance_nearest(x, y - 20, obj_clickable);
    } else if (dir = "D") {
        item = instance_nearest(x,  y + 20, obj_clickable);
    } else if (dir = "L") {
        item = instance_nearest(x - 20, y, obj_clickable);
    } else if (dir = "R") {
        item = instance_nearest(x + 20, y, obj_clickable);
    }
    
    if (item != "NONE") {
        active = item.active;
        if (active) {
            if (keyboard_check(vk_space) || keyboard_check_released(vk_enter)) {
                inter = instance_create(room_width / 2, 100, obj_textbox);
                inter.text = item.text;
                inter.item = item;
                freeze = true;
                if (global.bw) {
                    if (item.id != obj_bed.id) global.clicks += 1;
                } else {
                    if (item.id != obj_pc.id) global.clicks += 1;
                }
            }
        }   
    }
    
    // Collision with Walls
    
    if (place_meeting(x + (spd * xdir), y, obj_solid_wall) || place_meeting(x, y + (spd * ydir), obj_solid_wall)) {
        xdir = 0;
        ydir = 0;
        moving = false;    
    }
    
    // Collision with Clickable
    
    if (place_meeting(x + (spd * xdir), y, obj_clickable) || place_meeting(x, y + (spd * ydir), obj_clickable)) {
        xdir = 0;
        ydir = 0;
        moving = false;
    }
    
    x += spd * xdir;
    y += spd * ydir;
    
    if (moving) {
        sound += 1;
        if (sound == 6) {
            sound = 0;
            audio_sound_gain(snd_walk_1, 0.1, 0);
            audio_play_sound(snd_walk_1, 1, 0);
        }   
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Debug Controlls

if (global.debug) {

    if (keyboard_check_released(ord("N"))) {
        room_goto(CONSOLE);
    }
    
    
    if (keyboard_check_released(ord("R"))) {
        room_restart();
    }
    
    if (keyboard_check_released(ord("N"))) {
        if (global.bw) room_goto(NIGHT);
        else room_goto(CONSOLE);
    }


}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// DEBUG: Draw

draw_set_color(c_white);
// draw_text(912, 580, string(global.clicks));

draw_self();
// draw_text(x, y - 100, string(global.clicks) + "Promtp: " + string(freeze));
distance = 5;

if (distance_to_object(obj_clickable) &lt; distance) {
    if (item != "") {
        if (item.active) {
            if (global.bw) draw_sprite(spr_hint, 1, x, y - 30);
            else draw_sprite(spr_hint, 0, x, y - 30);
            hint = true;   
        }
    }
} else {
    hint = false;
}

if (global.bw) {
    if (global.clicks == 5) prompt = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
